{"version":3,"sources":["components/Styled/index.js","App.js","const/index.js","serviceWorker.js","index.js"],"names":["Global","createGlobalStyle","Header","styled","h1","SubHeader","h2","Row","div","Col","whatIsFullScreen","StyledEditor","textarea","StyledPreview","Icons","span","App","useState","rawText","setRawText","setFullScreen","className","onClick","name","id","defaultValue","onChange","value","target","dangerouslySetInnerHTML","__html","marked","breaks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0yDAEO,IAAMA,EAASC,YAAH,KAmBNC,EAASC,IAAOC,GAAV,KAINC,EAAYF,IAAOG,GAAV,KAQTC,EAAMJ,IAAOK,IAAV,KAOHC,EAAMN,IAAOK,IAAV,KAKD,kBAA6C,YAA7C,EAAEE,iBAAuD,OAAS,UAGlE,kBAA6C,WAA7C,EAAEA,iBAAsD,OAAS,SAIjE,kBAA6C,WAA7C,EAAEA,iBAAsD,OAAS,WAEjE,kBAA6C,YAA7C,EAAEA,iBAAuD,OAAS,SAKpEC,EAAeR,IAAOS,SAAV,KASZC,EAAgBV,IAAOK,IAAV,KAMbM,EAAQX,IAAOY,KAAV,KC1BHC,MAtCf,WAAgB,IAAD,EACiBC,mBCXZ,yqCDUL,mBACNC,EADM,KACGC,EADH,OAE6BF,mBAAS,IAFtC,mBAENP,EAFM,KAEYU,EAFZ,KAQb,OACE,yBAAKC,UAAU,OACb,kBAACrB,EAAD,MACA,kBAACE,EAAD,kCACA,kBAACK,EAAD,KACE,kBAACE,EAAD,CAAKC,iBAAkBA,GACrB,kBAACL,EAAD,cAEE,kBAACS,EAAD,CAAOQ,QAbI,kBAAoDF,EAA7CV,EAA2D,GAA1B,YAc3B,WAArBA,EAAgC,8BAAUa,KAAK,uBAA0B,8BAAUA,KAAK,qBAI7F,kBAACZ,EAAD,CAAca,GAAG,SAASC,aAAcP,EAASQ,SAfnC,SAAC,GAAD,IAAWC,EAAX,EAAEC,OAASD,MAAX,OAAuBR,EAAWQ,OAkBlD,kBAAClB,EAAD,CAAKC,iBAAkBA,GACrB,kBAACL,EAAD,eAEE,kBAACS,EAAD,CAAOQ,QAvBK,kBAAqDF,EAA9CV,EAA4D,GAA3B,aAwB9B,YAArBA,EAAiC,8BAAUa,KAAK,0BAA6B,8BAAUA,KAAK,qBAG/F,kBAACV,EAAD,CAAeW,GAAG,UAAUK,wBAAyB,CAACC,OAAQC,IAAOb,EAAS,CAACc,QAAQ,WE7B7EC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c49c8a4e.chunk.js","sourcesContent":["import styled, {createGlobalStyle} from 'styled-components';\n\nexport const Global = createGlobalStyle`\n  :root {\n    --subHeaderBG: lightblue;\n  }\n  *, *::after, *::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: 'Ubuntu', sans-serif;\n    font-size: 18px;\n  }\n\n  .App {\n    max-width: min(1200px, 95%);\n    margin: 0 auto;\n  }\n`;\n\nexport const Header = styled.h1`\n  text-align: center;\n`;\n\nexport const SubHeader = styled.h2`\n  text-align: center;\n  font-size: 2rem;\n  padding: .5em;\n  margin-bottom: 0;\n  background: var(--subHeaderBG);\n`;\n\nexport const Row = styled.div`\n  @media (min-width: 800px) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nexport const Col = styled.div`\n  margin-bottom: 50px;\n  /* transition: 0.5s; */\n\n  &:nth-child(1) {\n    display: ${({whatIsFullScreen}) => whatIsFullScreen === 'preview' ? 'none' : 'flex'};\n    flex-direction: column;\n    @media (min-width: 800px) {\n      width: ${({whatIsFullScreen}) => whatIsFullScreen === 'editor' ? '100%' : '49%'};\n    }\n  }\n  &:nth-child(2) {\n    display: ${({whatIsFullScreen}) => whatIsFullScreen === 'editor' ? 'none' : 'block'};\n    @media (min-width: 800px) {\n      width: ${({whatIsFullScreen}) => whatIsFullScreen === 'preview' ? '100%' : '49%'};\n    }\n  }\n`;\n\nexport const StyledEditor = styled.textarea`\n  resize: false;\n  padding: 20px;\n  width: 100%;\n  flex-grow: 1;\n  resize: none;\n  flex-basis: 500px;\n`;\n\nexport const StyledPreview = styled.div`\n  border: 1px solid gray;\n  padding: 20px;\n  overflow-x: scroll;\n`;\n\nexport const Icons = styled.span`\n  float: right;\n  cursor: pointer;\n`;\n","import React, { useState } from 'react';\nimport marked from 'marked';\nimport {\n  Header, Global, Row,\n  Col, SubHeader,\n  StyledEditor, StyledPreview,\n  Icons\n} from './components/Styled';\nimport defaultText from './const';\n\nfunction App() {\n  const [rawText, setRawText] = useState(defaultText);\n  const [whatIsFullScreen, setFullScreen] = useState('');\n  const toggleEditor = () => !whatIsFullScreen ? setFullScreen('editor') : setFullScreen('');\n  const togglePreview = () => !whatIsFullScreen ? setFullScreen('preview') : setFullScreen('');\n\n  const changeHandler = ({target: {value}}) => setRawText(value);\n\n  return (\n    <div className=\"App\">\n      <Global />\n      <Header>Simple Markdown Previewer</Header>\n      <Row>\n        <Col whatIsFullScreen={whatIsFullScreen}>\n          <SubHeader>\n            Editor\n            <Icons onClick={toggleEditor}>\n              {whatIsFullScreen === 'editor' ? <ion-icon name=\"arrow-back-outline\" /> : <ion-icon name=\"expand-outline\" />}\n            </Icons>\n          </SubHeader>\n          {/* <StyledEditor contentEditable=\"true\" id=\"editor\" onInput={changeHandler}>{rawText}</StyledEditor> */}\n          <StyledEditor id=\"editor\" defaultValue={rawText} onChange={changeHandler}></StyledEditor>\n        </Col>\n\n        <Col whatIsFullScreen={whatIsFullScreen}>\n          <SubHeader>\n            Preview\n            <Icons onClick={togglePreview}>\n            {whatIsFullScreen === 'preview' ? <ion-icon name=\"arrow-forward-outline\" /> : <ion-icon name=\"expand-outline\" />}\n            </Icons>\n          </SubHeader>\n          <StyledPreview id=\"preview\" dangerouslySetInnerHTML={{__html: marked(rawText, {breaks: true})}}></StyledPreview>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","const defaultRawText = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\nexport default defaultRawText;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}